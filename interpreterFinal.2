#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 3913 0 17 3 21 #";0 Interpreter part 1"
0 0 25 29 1 #"\n"
0 0 17 3 63
#"; Isaac Ng ikn3, Rahul Pokharna rkp43, Sibi Sengottuvel sxs1552"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"load"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"functionParser.scm\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; Function to start interpreting"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"evaluateDoc"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 8 #"fileName"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"return"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 16 #"evaluateFunction"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"main"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 4 #"() ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 25 3 1 #" "
0 0 14 3 8 #"fileName"
0 0 25 3 2 #") "
0 0 14 3 9 #"initState"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 9 #"initBreak"
0 0 25 3 1 #" "
0 0 14 3 8 #"initCont"
0 0 25 3 1 #" "
0 0 14 3 9 #"initThrow"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 9 #"initBreak"
0 0 25 3 1 #" "
0 0 14 3 8 #"initCont"
0 0 25 3 1 #" "
0 0 14 3 9 #"initThrow"
0 0 25 3 6 #" )))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; Main functiion, evaluates list of statements fed into it"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";Multiple statements"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"evaluateStatements"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 4 #")) ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 3 #") ("
0 0 14 3 17 #"evaluateStatement"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 17 #"evaluateStatement"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 18 #"; Single statement"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"evaluateStatement"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 5 #"))  ("
0 0 14 3 13 #"evaluateBlock"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"break"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 10 #"evaluateIf"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"while"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"call/cc"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 8 #"breaknew"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                  ("
0 0 14 3 13 #"evaluateWhile"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 8 #"breaknew"
0 0 25 3 2 #" ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 4 #"))) "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"return"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"return"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 11 #"returnValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 14 #"evaluateAssign"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 15 #"evaluateDeclare"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"try"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 21 #"evaluateTryCatchBlock"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 38 #";TODO ((eq? 'continue (car stmt)) (con"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"throw"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"function"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 23 #"evaluateFunctionClosure"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 16 #"evaluateFunction"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #"; add a layer to the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"addStateLayer"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 22 3 1 #"'"
0 0 25 3 4 #"()) "
0 0 14 3 5 #"state"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #"; remove a layer from the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 16 #"removeStateLayer"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 39 #"; Function for evaluating if statements"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"evaluateIf"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 6 #"ifCond"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 17 #"evaluateStatement"
0 0 25 3 2 #" ("
0 0 14 3 6 #"ifTrue"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"falseCheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 17 #"evaluateStatement"
0 0 25 3 2 #" ("
0 0 14 3 7 #"ifFalse"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; Function to evaluate while loops"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"evaluateWhile"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 2 #" ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 2 #" ("
0 0 14 3 6 #"ifCond"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 10 #"))        "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 13 #"evaluateWhile"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 11 #"continuenew"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 17 #"evaluateStatement"
0 0 25 3 2 #" ("
0 0 14 3 6 #"ifTrue"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 11 #"continuenew"
0 0 25 3 2 #" ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 4 #"))) "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 17 3 28 #"; removed remoivestatelayer "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"state"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"; Function to evaluate declaration, adding it to the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"evaluateDeclare"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 11 #"assignCheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 4 #")) ("
0 0 14 3 17 #"putInStateDeclare"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableName"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 17 #"putInStateDeclare"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableName"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 9 #"assignVal"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 125
(
 #"; Function to add a value to the state with an associated variable. "
 #"Throws an error if the variable has not been declared yet"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"evaluateAssign"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 9 #"isInState"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableName"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 10 #"putInState"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableName"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 13 #"variableValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 10 #"Undeclared"
0 0 25 3 1 #" "
0 0 19 3 35 #"\"Using a variable before declaring\""
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 23 #"evaluateFunctionClosure"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"putInState"
0 0 25 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 9 #"funcParam"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 8 #"funcBody"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 16 #"evaluateFunction"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 9 #"newReturn"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #"))) ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 21 #"evaluateFunctionBlock"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"addParams"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")) "
0 0 14 3 6 #"params"
0 0 25 3 2 #" ("
0 0 14 3 13 #"addStateLayer"
0 0 25 3 2 #" ("
0 0 14 3 10 #"putInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #")))) "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 9 #"newReturn"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 5 #"throw"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 19 3 27 #"\"wrong number of arguments\""
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"addParams"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 10 #"paramNames"
0 0 25 3 1 #" "
0 0 14 3 11 #"paramValues"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #" "
0 0 14 3 8 #"oldState"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"paramNames"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"state"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"addParams"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 10 #"paramNames"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 11 #"paramValues"
0 0 25 3 3 #") ("
0 0 14 3 10 #"putInState"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 10 #"paramNames"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 11 #"paramValues"
0 0 25 3 2 #") "
0 0 14 3 8 #"oldState"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #" "
0 0 14 3 8 #"oldState"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                           "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 17 3 93
(
 #"; Determines whether a variable is in the state, i.e. if it has been"
 #" declared and/or assigned"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"isInState"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #")))) "
0 0 17 3 51 #"; if the state still has layers, go into the layers"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 8 #"))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 85
(
 #"; Puts values into a state, removing any instance of the variable fr"
 #"om the list first"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"putInState"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 25 3 2 #" ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 3 #")) "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 2 #" ("
0 0 14 3 8 #"topLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #") ("
0 0 14 3 9 #"valueList"
0 0 25 3 2 #" ("
0 0 14 3 8 #"topLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"putInStateDeclare"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 25 3 2 #" ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 3 #")) "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 2 #" ("
0 0 14 3 8 #"topLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #") ("
0 0 14 3 9 #"valueList"
0 0 25 3 2 #" ("
0 0 14 3 8 #"topLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 52 #"; Removes all instances of a variable from the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"removeFromState"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")) "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #")) ( ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #")))) "
0 0 17 3 51 #"; if the state still has layers, go into the layers"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"variableList"
0 0 25 3 2 #" ("
0 0 14 3 15 #"removeFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"valueList"
0 0 25 3 2 #" ("
0 0 14 3 15 #"removeFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 11 #")))))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #"; Gets the value of a variable from the state. If unassigned, throws"
 #" an error"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"getFromState"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 5 #"unbox"
0 0 25 3 2 #" ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #"; Gets the box from the current state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"getBoxFromState"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"badstate"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"State"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 6 #" found"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 5 #"))) ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 15 #"getBoxFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 8 #"))))))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 17 3 141
(
 #"; Function to determine whether the expression will return a boolean"
 #" or a number, and returns the literal values, as well as variable va"
 #"lues."
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #"; Lots of checks to filter which expression should go to which funct"
 #"ion"
) 0 0 25 29 1 #"\n"
0 0 17 3 8 #"; Mvalue"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"evaluateExpression"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 9 #"isInState"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #") ("
0 0 14 3 12 #"getFromState"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #"))  ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 10 #"Undeclared"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Using"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"variable"
0 0 19 3 1 #" "
0 0 19 3 6 #"before"
0 0 19 3 10 #" declaring"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 16 #"evaluateFunction"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"=="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"!="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"<="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"||"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"!"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 12 #"evaluateBool"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 13 #"evaluateValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 13 #"evaluateValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 13 #"evaluateValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 13 #"evaluateValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"%"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 13 #"evaluateValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 13 #"NotExpression"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Cannot"
0 0 19 3 1 #" "
0 0 19 3 8 #"evaluate"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 11 #" expression"
0 0 19 3 1 #"\""
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #"; Function to return true or false given an expression"
0 0 25 29 1 #"\n"
0 0 17 3 8 #"; Mvalue"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"evaluateBool"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 17 #"convertBoolToWord"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"=="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #")) ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 5 #")))) "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"!="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #")) ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))) "
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"<="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 2 #">="
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #")) ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"||"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #")) ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"!"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 17 #"convertWordToBool"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 10 #"NotBoolean"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Cannot"
0 0 19 3 1 #" "
0 0 19 3 8 #"evaluate"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 7 #"boolean"
0 0 19 3 11 #" expression"
0 0 19 3 1 #"\""
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; Helper function to assist in conversion between words and boolean "
 #"values"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"convertBoolToWord"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 4 #"bool"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #"; Helper function to assist in conversion between boolean values and"
 #" words"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"convertWordToBool"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"word"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"true"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"false"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 4 #"word"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 97
(
 #"; Function to return the exact value of a function given an expressi"
 #"on, returning a numeral value"
) 0 0 25 29 1 #"\n"
0 0 17 3 8 #"; Mvalue"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"evaluateValue"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"existOp2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 5 #"))) ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"quotient"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"%"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #") ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"badop"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Undefined"
0 0 19 3 9 #" operator"
0 0 19 3 1 #"\""
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 21 #"evaluateTryCatchBlock"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 15 #"evaluateFinally"
0 0 25 3 2 #" ("
0 0 14 3 11 #"finallyBody"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 3 #") ("
0 0 14 3 7 #"call/cc"
0 0 25 29 1 #"\n"
0 0 25 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"finish"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 44 #"                                           ("
0 0 14 3 6 #"finish"
0 0 25 3 2 #" ("
0 0 14 3 16 #"evaluateTryBlock"
0 0 25 3 2 #" ("
0 0 14 3 7 #"tryBody"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 2 #"  "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 11 #"error_state"
0 0 25 3 1 #" "
0 0 14 3 8 #"my_error"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 116
(
 #"                                                                    "
 #"                                               ("
) 0 0 14 3 6 #"finish"
0 0 25 3 2 #" ("
0 0 14 3 13 #"evaluateCatch"
0 0 25 3 2 #" ("
0 0 14 3 9 #"catchBody"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateExpression"
0 0 25 3 1 #" "
0 0 14 3 8 #"my_error"
0 0 25 3 1 #" "
0 0 14 3 11 #"error_state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";evaluate catch block"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"evaluateCatch"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 9 #"catchList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 9 #"catchList"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"state"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 18 #"evaluateCatchBlock"
0 0 25 3 1 #" "
0 0 14 3 9 #"catchList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";evaluate finally if it exists"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"evaluateFinally"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 11 #"finallyList"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 11 #"finallyList"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 5 #"state"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 16 #"evaluateTryBlock"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 11 #"finallyList"
0 0 25 3 2 #") "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 17 3 14 #";evaluateBlock"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"evaluateBlock"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 3 #") ("
0 0 14 3 13 #"addStateLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 16 #"evaluateTryBlock"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 2 #" ("
0 0 14 3 13 #"addStateLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"evaluateCatchBlock"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 3 #") ("
0 0 14 3 10 #"putInState"
0 0 25 3 2 #" ("
0 0 14 3 9 #"exception"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 2 #") "
0 0 14 3 5 #"error"
0 0 25 3 2 #" ("
0 0 14 3 13 #"addStateLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 3 #")) "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 21 #"evaluateFunctionBlock"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 1 #" "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"removeStateLayer"
0 0 25 3 2 #" ("
0 0 14 3 18 #"evaluateStatements"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 25 3 2 #" ("
0 0 14 3 13 #"addStateLayer"
0 0 25 3 1 #" "
0 0 14 3 5 #"state"
0 0 25 3 2 #") "
0 0 14 3 6 #"return"
0 0 25 3 1 #" "
0 0 14 3 5 #"break"
0 0 25 3 1 #" "
0 0 14 3 8 #"continue"
0 0 25 3 1 #" "
0 0 14 3 5 #"throw"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Abstraction below"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 53 #"; Defined for use with blocks, removes the 'begin key"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"blockList"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; Defines the initial state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"initState"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 22 3 1 #"'"
0 0 25 3 5 #"())))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Initial Break"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"initBreak"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 8 #"badbreak"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Break"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 6 #" block"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; Initial Continuation"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"initCont"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 7 #"badcont"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"Continue"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" loop"
0 0 19 3 1 #"\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; Initial Throw"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"initThrow"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 17 #"UncaughtException"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; For use with function closure creation"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"funcName"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"funcParam"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"funcBody"
0 0 25 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #"; if the first item in a list is a variable name"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; Returns the value from the valueList"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 41 #"; returns the operator from an expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; returns the first operand from an expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #"; returns the second operand from an expression"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #";returns the thrid operand"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 25 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 54 #"; Determines whether the second operator exists or not"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"existOp2"
0 0 25 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; Gets the if condition of while and if statements"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"ifCond"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 56 #"; Gets the condition to execute if the condition is true"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"ifTrue"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 57 #"; Gets the condition to execute if the condition is false"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"ifFalse"
0 0 25 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 67
#"; Determines whether there is an else statement for an if statement"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"falseCheck"
0 0 25 3 1 #" "
0 0 14 3 5 #"cdddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 55 #"; Gets the value to be returned from a return statement"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"returnValue"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"; gets the name for a variable, used in assignment and declaration"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"variableName"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; gets the value for a variable, used in assignment"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"variableValue"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; Returns the list of variables from the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"variableList"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; Returns the list of values from the state"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"valueList"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; checks whether there is an assignment after a declaration"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"assignCheck"
0 0 25 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Used in assignment after a delcaration"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"assignVal"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; Used in putInState"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"topLayer"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";Used for catch"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"exception"
0 0 25 3 1 #" "
0 0 14 3 5 #"caadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";try-catch abstractions:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"tryBody"
0 0 25 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"catchBody"
0 0 25 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"finallyBody"
0 0 25 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 25 3 1 #")"
0           0
